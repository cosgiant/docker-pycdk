name: Get Container Package Info

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch: 
env:
  registry: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PyCDK_TAG: 2.155.0
  repo_owner: ${{ github.repository_owner }}

jobs:
  compare-tags:
    runs-on: ubuntu-latest
    # Set permissions
    permissions:
      packages: read
      contents: read
    steps:
      - name: "Actions Values"
        id: actions-values
        run: |
          echo "=================="
          echo "Input:"
          echo "=================="
          echo "container_tag: ${{ env.PyCDK_TAG }}"
          echo "------------------"
          
          echo "=================="
          echo "Env:"
          echo "=================="
          echo "Registry: ${{ env.registry }}"
          echo "repo_owner: ${{ env.repo_owner }}"
          echo "------------------"
          
          echo "=================="
          echo "GitHub:"
          echo "=================="
          echo "Actor: ${{ github.actor }}"
          echo "repository: ${{ github.repository }}"
          echo "repository_owner: ${{ github.repository_owner }}
          echo "------------------"

      # - name: "🔐🐳 Login to the Container registry"
      #   id: docker_login_action
      #   uses: docker/login-action@v3.3.0
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Checkout code
      #   uses: actions/checkout@v3

      # Step 1: Generate tags based on GitHub releases using docker/metadata-action
      #- name: "Generate metadata (tags, labels) for Docker from Releases"
      #  id: meta
      #  uses: docker/metadata-action@v5.5.1
      #  with:
      #    images: ghcr.io/${{ github.repository }}
      #    tags: |
      #      type=ref,event=release
      #      type=sha

      # Step 2: Authenticate to GitHub Container Registry (ghcr.io)
      # - name: Authenticate to GitHub Container Registry
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # # Step 3: List all tags for the repository in ghcr.io
      # - name: Fetch tags from GHCR
      #   id: fetch_tags
      #   run: |
      #     REPO=ghcr.io/${{ github.repository }}
      #     EXISTING_TAGS=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #       https://ghcr.io/v2/${{ github.repository }}/tags/list | jq -r '.tags[]')
      #     echo "Existing tags in GHCR: $EXISTING_TAGS"
      #     echo "existing_tags=$EXISTING_TAGS" >> $GITHUB_ENV

      # # Step 4: Compare release tags and check if they exist in GHCR
      # - name: Compare tags and check if release tags exist
      #   run: |
      #     RELEASE_TAGS="${{ steps.meta.outputs.tags }}"
      #     echo "Generated release tags: $RELEASE_TAGS"
          
      #     for TAG in $RELEASE_TAGS; do
      #       if echo "${{ env.existing_tags }}" | grep -qw "$TAG"; then
      #         echo "Tag $TAG exists in GHCR."
      #       else
      #         echo "Tag $TAG does not exist in GHCR."
      #       fi
      #     done

      # - name: "Compare Tags"
      #   id: compare_tags
      #   run: |
      #     PYCDK_TAG=${{ inputs.image_tags }}
      #     META_TAG=${{ steps.meta.outputs.tags }}
      #     echo "PYCDK_TAG: ${{ env.PYCDK_TAG }}"
      #     echo "META_TAG: $META_TAG"
      #     echo "tags: $tags - labels: $labels - build: $build"
      #     #if [ "$PYCDK_TAG" = "$META_TAG" ]; then
      #     #  echo "Tags match!"
      #     #else
      #     #  echo "Tags do not match!"
      #     #  exit 1
      #     #fi
      #   env:
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     build-args: CDK_VERSION=${{ steps.meta.outputs.annotations }}

  # build:

  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: read
  #     # This is used to complete the identity challenge
  #     # with sigstore/fulcio when running outside of PRs.
  #     id-token: read

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     # Install the cosign tool except on PR
  #     # https://github.com/sigstore/cosign-installer
  #     - name: Install cosign
  #       if: github.event_name != 'pull_request'
  #       uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
  #       with:
  #         cosign-release: 'v2.2.4'

  #     # Set up BuildKit Docker container builder to be able to build
  #     # multi-platform images and export cache
  #     # https://github.com/docker/setup-buildx-action
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

  #     # Login against a Docker registry except on PR
  #     # https://github.com/docker/login-action
  #     - name: Log into registry ${{ env.REGISTRY }}
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # Extract metadata (tags, labels) for Docker
  #     # https://github.com/docker/metadata-action
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  #     # Build and push Docker image with Buildx (don't push on PR)
  #     # https://github.com/docker/build-push-action
  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
  #       with:
  #         context: .
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     # Sign the resulting Docker image digest except on PRs.
  #     # This will only write to the public Rekor transparency log when the Docker
  #     # repository is public to avoid leaking data.  If you would like to publish
  #     # transparency data even for private images, pass --force to cosign below.
  #     # https://github.com/sigstore/cosign
  #     - name: Sign the published Docker image
  #       if: ${{ github.event_name != 'pull_request' }}
  #       env:
  #         # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
  #         TAGS: ${{ steps.meta.outputs.tags }}
  #         DIGEST: ${{ steps.build-and-push.outputs.digest }}
  #       # This step uses the identity token to provision an ephemeral certificate
  #       # against the sigstore community Fulcio instance.
  #       run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
